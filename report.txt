% CS32 Project 3 Report (Draft)

# Classes and Their Public Member Functions

## The `StudentWorld` Class

Excluding the constructor, here are the public member functions in the
`StudentWorld` class:

-   `virtual int init() override`{.cpp}

    This function is used for initialize the `StudentWorld` state, which
    includes reading and parsing the field description and the ant programs,
    constructing `Actor` objects. When everything is fine, it returns
    `GWSTATUS_CONTINUE_GAME` to signal that the simulation can begin;
    otherwise it returns `GWSTATUS_LEVEL_ERROR` to report the error.

    This member function is virtual and overrides the pure virtual member
    function in the `GameWorld` class.

-   `virtual int move() override`{.cpp}

    This function is used for calling `doSomething()` for each actor that is
    present at the beginning of the tick and alive during its turn in the
    simulated `StudentWorld` state once in a single tick. See the section on
    Design Decisions for details.

    In addition, this function performs other auxiliary tasks such as
    incrementing the tick, updating the status text, garbage-collects dead
    actors, and ending the simulation when the tick reaches 2,000.

    This member function is virtual and overrides the pure virtual member
    function in the `GameWorld` class.

-   `virtual void cleanUp() override`{.cpp}

    This function performs clean up at the end of simulation. It destructs all
    actor objects and resets the state of the `StudentWorld`.

    This member function is virtual and overrides the pure virtual member
    function in the `GameWorld` class.

-   ```cpp
    template<typename K, typename... T>
    ActorRange getActorsAt(K k, T... t) const
    ```

    This function is used for looking up actors given a particular location,
    or optionally a location and an image ID. It returns an `ActorRange`,
    which exposes `const_iterator`s to the underlying container used by
    `StudentWorld` to store `Actor`s.

    This function is designed to be called from the `Actor` class or its
    descendants.

    It is not virtual because `StudentWorld` expects no derived classes and it
    will not be overridden.

-   ```cpp
    template<typename Actor, typename... Args>
    void insertActor(Args&&... args)
    ```

    This function is used for inserting new actors. Instead of taking a
    pointer to `Actor`, it takes the arguments to be passed to the
    constructor, except for the `StudentWorld` `this` pointer.

    This function is designed to be called from the `Actor` class or its
    descendants. It is also called by `init()` while setting up the field
    during initialization.

    It is not virtual because `StudentWorld` expects no derived classes and it
    will not be overridden.

-   `void increaseAntCountForColony(int t)`{.cpp}

    This function is used for incrementing the number of ants produced by a
    colony.

    This function is designed to be called from the `Actor` class or its
    descendants.

    It is not virtual because `StudentWorld` expects no derived classes and it
    will not be overridden.

## The `Actor` Class

The `Actor` class is the base class for all actors. It has these public member
functions:

-   `virtual void doSomething() = 0`{.cpp}

    This pure virtual function is called by `StudentWorld::move()`{.cpp} to
    let each actor perform its action during a tick.

    It is defined to be pure virtual because each `Actor` has different
    behavior when doing something.

-   `int iid() const`{.cpp}

    This function allows anyone to determine the image ID of the current
    actor. Despite its name, besides specifying a kind of image to display on
    the screen, the image ID provides an efficient way to distinguish between
    different derived classes of an `Actor`.

    It is not virtual because it does not need to be overridden.

-   `std::tuple<int, int, int> getKey() const`{.cpp}

    This function returns the sort key for the current actor. All `Actor`s are
    sorted according to this key. It comprises the $x$, $y$ coordinates and
    the image ID. See the section on Design Decisions for details.

    It is not virtual because it does not need to be overridden.

-   `virtual bool isDead() const`{.cpp}

    This function determines whether or not the current actor is dead. It can
    be called by other member functions in the `Actor` hierarchy, but it is
    also called by `StudentWorld::move()` to determine which actors need to be
    deleted.

    It is defined as virtual because the default behavior, namely that actors
    are always not dead, should be overridden for energy-holders.

-   `virtual void beStunned()`{.cpp}

-   `virtual void bePoisoned()`{.cpp}

-   `virtual void beBitten(int damage)`{.cpp}

    The three functions above are called when an actor is stunned, poisoned,
    or bitten, respectively. The default behavior is to do nothing.

    They are defined as virtual because certain insects have different
    behavior when they are stunned, poisoned, or bitten.

    They however are defined here so that the caller need not first test
    whether a particular `Actor` can in fact be stunned, poisoned, or bitten.

## The `Pebble` Class

The `Pebble` class represents pebbles.

Besides the constructor, which constructs a `Pebble` object with an associated
`StudentWorld` and a location, it has no public member functions.

## The `PoolOfWater` Class

The `PoolOfWater` class represents pools of water.

Besides the constructor, which constructs a `PoolOfWater` object with an
associated `StudentWorld` and a location, it has no public member functions.

## The `Poison` Class

The `Poison` class represents poisons.

Besides the constructor, which constructs a `Poison` object with an
associated `StudentWorld` and a location, it has no public member functions.

## The `EnergyHolder` Class

The `EnergyHolder` class represents actors that have an energy content, also
known as hit-points.

It has no public member functions.

## The `Food` Class

The `Food` class represents piles of food.

Besides the constructor, it has these public member functions:

-   `void increaseBy(int howMuch)`{.cpp}

    This function allows some other `Actor` to add some energy content
    to the pile of food. For example, `Ant`s can deposit their held food, or
    when insects die they also create food.

    It is not defined to be virtual because no other classes will derive from
    `Food` and override it.

-   `int consumeAtMost(int howMuch)`{.cpp}

    This function allows some other `Actor` to consume some energy content
    within the pile of food. It takes an argument specifying the maximum to
    consume, and returns the amount actually consumed.

    It is not defined to be virtual because no other classes will derive from
    `Food` and override it.

## The `Pheromone` Class

The `Pheromone` class represents a type of pheromone emitted by an `Ant` from
a specific colony.

Besides the constructor, which constructs a `Pheromone` object with an
associated `StudentWorld`, a location, and the colony number of the ant that
produced it, it has only one public member function:

-   `void increaseBy(int howMuch)`{.cpp}

    This function allows an `Ant` to add some energy content to the pheromone.
    Specifically, an `Ant` can emit pheromone, and if there is already a
    `Pheromone` object at the location the `Ant` decides to emit the
    pheromone, the energy content is simply added to this existing pheromone.
    It is similar to the similarly function in `Food`, but it does additional
    checking to make sure it has no more than 768 units.

    It is not defined to be virtual because no other classes will derive from
    `Pheromone` and override it.

## The `Anthill` Class

The `Anthill` class represents the anthill, the birthplace and home of an
`Ant` from a specific colony.

Besides the constructor, which constructs an `Anthill` object with an
associated `StudentWorld`, a location, the colony number, and a reference to a
`Compiler`, it has one public member function:

-   `int getType() const`{.cpp}

    This function returns the colony number of the anthill.

    It is not defined to be virtual because no other classes will derive from
    `Anthill` and override it.

## The `Insect` Class

The `Insect` class serves as a base class for the three kinds of insects,
namely ants, baby grasshoppers and adult grasshoppers. It has some protected
member functions for common behavior. It however has no public member
functions.

## The `Ant` Class

The `Ant` class represents ants. Its public constructor takes a reference to
the `StudentWorld` in which the ant lives, the location, the ant colony
number, and a reference to the `Compiler`. Besides the constructor, it has no
public member functions.

## The `Grasshopper` Class

The `Grasshopper` class serves as a base class for the two kinds of
grasshoppers. It captures their common behavior of consuming some food and
then moving. It has no public member functions, not even the constructor.

## The `BabyGrasshopper` Class

The `BabyGrasshopper` class represents baby grasshoppers. Besides the
constructor, which constructs a baby grasshopper with a reference to the
`StudentWorld` and its location, it has no public member functions.

## The `AdultGrasshopper` Class

The `AdultGrasshopper` class represents adult grasshoppers. Besides the
constructor, which constructs an adult grasshopper with a reference to the
`StudentWorld` and its location, it has no public member functions.

# Unfinished Features and Known Bugs

None.

# Design Decisions and Assumptions

## Ordering of Events

The specification does not mention the ordering of events (`doSomething()` by
actors. Indeed it can only be inferred that each tick serves as the smallest
unit of time interval and is a synchronization point for all events. This
serves as a global clock and this establishes a *strict partial order* for all
events.

For issues of consistency and determinism (barring the random number
generator), we want the following three intuitive properties to hold:

-   An actor will be given a chance to `doSomething()` if and only if it is
    present at the beginning of the tick and alive when it is their turn.

-   There is a *total order* of events, that is for any two events, exactly
    one of them happens-before the other one, including all externally
    observable side effects of these events.

-   The exact happen-before relationship between any two events even in the
    same tick should be predictable given knowledge of the history of the
    `StudentWorld` state.

To achieve the first property, references (iterators in fact) to the actors
present at the beginning of a tick are saved and it is these iterators that
are being iterated through.

To achieve the second property, some total ordering must be chosen. In this
design, the following ordering is used:

-   Regardless of whether the actor has moved in this tick, actors whose
    $x$--$y$ coordinates *at the beginning of the tick* is smaller will have
    its `doSomething()` scheduled before other actors;

-   When two actors are at the same location at the beginning of the tick, the
    actor whose image ID is numerically smaller will have its `doSomething()`
    scheduled before other actors at the same location;

-   When two actors are the same location and have the same image ID, the
    actor that occupies the current location earlier will have its
    `doSomething()` scheduled before other actors at the same location and of
    the same image ID.

This will resolve ambiguities in situations such as two insects occupying the
same location as a pile of food. It also allows the following convenient
property:

**Property (Time Invariance of Ordering of Immobile Actors)**. For any two
actors that do not move within a time period, the relative ordering of their
`doSomething()` remains unchanged.

To achieve the third property, (almost) all side effects effected by an actor
is committed immediately after its `doSomething()` has completed. This
includes, for example, that if an actor has chosen to move, the data structure
that keeps track of locations will immediately update after the
`doSomething()` has completed, so that even if a later actor tries to search
for actors at the new location, it will discover the earlier actor, and if it
tries to search for actors at the earlier location, it will not discover the
earlier actor. This is necessary to achieve, for example, the following
intuitive behavior: *for every adult grasshopper that was bitten, there exists
at least one other insect to retaliate at the same coordinate as the bitten
adult grasshopper*.

The only exception to the rule above is that if an `Actor` has caused an
`Actor` who has already performed its action in this tick to die, the dead
earlier `Actor` will not be destructed until right before the end of the tick.

## Data Structure For `Actor`s In `StudentWorld`

The specification intentionally leaves the data structure used to hold
pointers to `Actor`s in `StudentWorld` unspecified. It suggests a 2D array of
linked lists containing pointers to `Actor`.

In this design, `StudentWorld` instead uses a multimap from the 3-tuple
containing $x$, $y$, and image ID to `Actor*`. The primary benefit is that it
can not only (asymptotically) efficiently look up all actors at a particular
location, it can also efficiently lookup a particular actor at a particular
location. This is beneficial because in many scenarios, we are only interested
in a particular kind of actor at a location; for example, when an insect dies,
we are interested in finding out whether there is already a pile of food at
the location, and when an insect attempts to move, we are interested in
finding out whether there is a pebble at the new location. Making the image ID
part of the key to the multimap would support such lookups efficiently.

Of course, we need to retain the ability to look up all actors at a particular
location. To this end, I have defined my own ordering for tuples. The struct
template `TupleComp` achieves this. It induces an ordering on (potentially
heterogeneous) tuples of possibly unequal sizes. The standard ordering on
tuples require them to be of the same size, which is too restrictive. Instead,
we model each element in an tuple as a sort key that determines whether or not
any possible actor belongs in this partition. Then tuples of different sizes
become coarser or finer partitions of the set of actors. It has the following
properties: (a) uniqueness: for all actor, there exists one and only one sort
key, and therefore this sort key partitions the set of all actors into
disjoint subsets; (b) composability: for all concatenation of tuples $(p,q)$,
the partition induced by $(p,q)$ is the same as partitioning by $q$ on each
subset produced by partitioning on $p$. Thus we can define a strict weak
ordering $<^*$ on these tuples of unequal sizes by taking the longest common
prefix and then using the standard strict weak ordering $<$. It is easy to
prove that this new ordering is in fact irreflexive and transitive, and a
detailed proof is omitted here.

## Pragmatism Over Object-Oriented Purity

Object-oriented purists would scoff at the use of `dynamic_cast` or other
equivalent methods to detect an object's actual type. They argue, instead,
that the object's concrete type is unimportant, and instead we should "add a
method to check for a kind of behavior"[^nach17]. I argue that this is not
only unnatural, but also a form of premature abstraction that leads to overly
complicated and opaque designs.

[^nach17]: Nachenberg, C.S. (2016). *Object Oriented Programming Tips*. Online
resource. Retrieved February 27, 2017 from
<http://web.cs.ucla.edu/classes/winter17/cs32/Projects/3/oodtips.pdf>

First, when we have a hierarchy of classes related by inheritance (is-a
relationship), it is natural to ask where a particular object belongs in this
hierarchy. To put in more mathematical terms, by designing a hierarchy of
classes, we have effectively designed *partitions* of the set of objects. By
making a class called `Insect` derive from `Actor`, we are essentially
establishing a subset relationship between these two sets. Barring multiple
inheritance, all subsets defined in this manner are either disjoint or subsets
of themselves; that is, their intersection is either the empty set or one of
the set itself.

In light of this, it is very easy and natural to feel the need for another
fundamental set operation, namely, element-of. Indeed, the spec itself does
not describe actions being conditional on a certain kind of behavior, instead
it merely describes the actual type of the object. It uses language like "if
the ant is currently on the same square as a food object [...]", instead of
"if the ant is currently on the same square as an object that is alive and
edible." Even when it does describe a kind of behavior, it invariably
clarifies what concrete types this behavior is exhibited on.

Second, it is unclear that such an abstraction provides any benefit at all.
One might argue that as programs get more complicated and classes become more
numerous, it would be less cumbersome to describe a behavior rather than
enumerating all classes that exhibits this behavior. However, as noted above,
such predicates on objects often do not follow precisely the hierarchy of
classes, and a traditional object-oriented solution would lead to excessive
overridden methods scattered in many classes that are also hard to maintain.
On the other hand, enumerating the classes (either through `dynamic_cast`, or
a hand-rolled equivalent such as through their mapping to image IDs) is a
direct translation of the spec that provides clarity in the source code.

## More Than Four Bug Programs Provided

It is not clear from the spec what should be done when more than four bug
programs are provided. The sample executable crashes in its
`StudentWorld::increaseScore(int)`{.cpp} member function, presumably due to an
out-of-bounds array access when comparing the number of ants produced.

## Winning Ant Colony Calculation

Although the spec itself is reasonably clear on how the winning ant colony is
determined, the sample executable itself does not follow the spec. The sample
has a bug that causes it to misidentify the winning ant colony if the first
(index 0) ant colony overtakes another ant colony. This is likely due to the
special handling of the first ant colony in the sample executable's
`StudentWorld::increaseScore(int)`{.cpp} member function. I have decided to
ignore the sample executable and follow the spec closely.

## Adult Grasshoppers' Jumps

The spec is unclear about how a random open square within a radius of 10 is
selected when an adult grasshopper jumps. Indeed, the logical thing to do
would be that any square within this radius of 10 would have equal probability
of being jumped to. However, the sample executable, in
`AdultGrasshopper::jump()`{.cpp}, does this instead:

```gnuassembler
movl   $0x3, %edi           ; sets edi (first function argument) to 3
movl   $0xa, %esi           ; sets esi (second function argument) to 10
movl   %eax, -0x28(%rbp)    ; saves current y coordinate to rbp-0x28
callq  0x10000f4d0          ; calls randInt(3, 10)
xorl   %edi, %edi           ; sets edi (first function argument) to zero
movl   $0x167, %esi         ; sets esi (second function argument) to 359
movsd  0x189b9(%rip), %xmm0 ; sets xmm0 to 2.0
cvtsi2sdl %eax, %xmm1       ; casts radius to double and store in xmm1
movsd  %xmm1, -0x30(%rbp)   ; saves radius in double to rbp-0x30
mulsd  0x1fcf0(%rip), %xmm0 ; multiply xmm0 by pi to get 2pi
movsd  %xmm0, -0x50(%rbp)   ; saves 2pi to local variable at rbp-0x50
callq  0x10000f4d0          ; calls randInt(0, 359)
movsd  0x1898e(%rip), %xmm0 ; sets xmm0 to 360.0
cvtsi2sdl %eax, %xmm1       ; converts angle to double and store in xmm1
movsd  -0x50(%rbp), %xmm2   ; loads 2pi in xmm2
mulsd  %xmm1, %xmm2         ; multiply xmm1 with xmm2: the angle times 2pi
divsd  %xmm0, %xmm2         ; divide the result by 360.0
movsd  %xmm2, -0x38(%rbp)   ; saves the angle in radian in rbp-0x38
movsd  -0x30(%rbp), %xmm0   ; loads the radius to xmm0
movsd  -0x38(%rbp), %xmm1   ; loads the angle in radian to xmm1
movsd  %xmm0, -0x58(%rbp)   ; saves radius to rbp-0x58
movaps %xmm1, %xmm0         ; saves angle to xmm0
callq  0x10003a82c          ; calls cos() to find cosine of random angle
movsd  -0x58(%rbp), %xmm1   ; loads radius to xmm1
mulsd  %xmm0, %xmm1         ; multiply radius with cosine of angle
cvttsd2si %xmm1, %eax       ; truncates this to integer and saves in eax
movl   %eax, -0x3c(%rbp)    ; saves the delta x coordinate to rbp-0x3c
```

In other words, it calls randInt(3, 10) to get the radius and randInt(0, 359)
to get the angle and then computes the coordinate. This quite obviously
results in a non-uniform distribution as squares located closer to the center
(but outside $r=3$) will have a higher probability.

![Probability distribution of coordinate deltas.](./Probs.png)

Furthermore, the sample executable also does not do a good job of detecting
open squares. Instead of enumerating all squares and finding whether or not
all of them have pebbles, it simply tries 10 times to jump, and if none
succeeds, presumes all square within a radius of 10 are occupied by pebbles.

In my design, I followed common sense and instead looks at all open squares
within a radius of 10, and as long as there is at least one open square, it
will pick one with equal probability.

# Testing

None.
